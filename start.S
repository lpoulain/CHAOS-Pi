
.section ".init", "ax", %progbits
.balign 4
.globl _start
_start: 
//"================================================================"
//  This simply hold startup data for SmartStart its trivial 
//"================================================================"
        adr x12, _start                                                 // Hold boot address in high register R12
        ldr x1, =RPi_BootAddr                                   // Address of RPi_BootAddr
        str w12, [x1]                                                   // Store the boot address

        ldr     x0, =0x3F000000                                         // No need to detect address in 64bit mode it has to be 0x3F000000 on Pi3
        ldr x1, =RPi_IO_Base_Addr                               // Address of RPi_IO_Base_Addr
        str w0, [x1]                                                    // Store the IO base address

        ldr     x0, =0xC0000000                                         // No need to detect address in 64bit mode it has to be 0xC0000000 on Pi3
        ldr x1, =RPi_ARM_TO_GPU_Alias                   // Address of RPi_IO_Base_Addr
        str w0, [x1]                                                    // Store the IO base address

        mov x0, #1                                                              // Multicore support starts as 1 core
        ldr x1, =RPi_CoresReady                                 // Address of RPi_CoresReady
        str w0, [x1]                                                    // Store the CoresReady count as 1

        mov x0, #0x98                                                   // Compiled for ARM8 CPU in AARCH64 and supports 4 cores
.if (__ARM_FP == 14)
        orr x0, x0, #0x80000000                             // Set the hard float flag
.endif  
        ldr x1, =RPi_CompileMode                                // Address of RPi_CompileMode
        str w0, [x1]                                                    // Store the compiler mode  

        mrs     x0, midr_el1                                            // Read CPU Id register
        ldr x1, =RPi_CpuId                                              // Address of RPi_CpuId
        str w0, [x1]                                                    // Store the CPU id 

//"================================================================"
//  Initialize Generic Timers for Core0
//"================================================================"
        mrs     x0, cnthctl_el2
        orr     x0, x0, #0x3                                            /* Enable EL1 access to timers */
        msr     cnthctl_el2, x0
        msr     cntvoff_el2, xzr
        
        /* Not sure if I want this yet */
        mrs     x0, cntkctl_el1
        orr     x0, x0, #0x3                                            /* Enable EL0 access to timers */
        msr     cntkctl_el1, x0

//"================================================================"
//  Setup stack pointers for each core and each CPU operation mode
//"================================================================"
multicore_start:
    ldr x2, = __EL2_stack_core0                         // Address of EL2_stack_core0 stack pointer value
    ldr x3, = __EL1_stack_core0                         // Address of EL1_stack_core0 stack pointer value
    ldr x4, = __EL0_stack_core0                         // Address of EL0_stack_core0 stack pointer value
        mrs x6, mpidr_el1                                               // Read core id on ARM8
        ands x6, x6, #0x3                                               // Make cpu id bitmask
        beq set_stacks                                                  // Ready to set core 0 stacks
    ldr x2, = __EL2_stack_core1                         // Address of EL2_stack_core1 stack pointer value
    ldr x3, = __EL1_stack_core1                         // Address of EL1_stack_core1 stack pointer value
    ldr x4, = __EL0_stack_core1                         // Address of EL0_stack_core1 stack pointer value
        cmp x6, #1                                                              // Check cpu id for core 1
        beq set_stacks                                                  // Ready to set core 1 stacks
    ldr x2, = __EL2_stack_core2                         // Address of EL2_stack_core2 stack pointer value
    ldr x3, = __EL1_stack_core2                         // Address of EL1_stack_core2 stack pointer value
    ldr x4, = __EL0_stack_core2                         // Address of EL0_stack_core2 stack pointer value
        cmp x6, #2                                                              // Check cpu id for core 2
        beq set_stacks                                                  // Ready to set core 1 stacks
    ldr x2, = __EL2_stack_core3                         // Address of EL2_stack_core3 stack pointer value
    ldr x3, = __EL1_stack_core3                         // Address of EL1_stack_core3 stack pointer value
    ldr x4, = __EL0_stack_core3                         // Address of EL0_stack_core3 stack pointer value
set_stacks:
        mov     sp, x2                                                          /* EL2 stack set */
        msr     sp_el1, x3                                                      /* EL1 stack set */
        msr     sp_el0, x4                                                      /* EL0 stack set */

//"================================================================"
//  Initilize MPID/MPIDR registers for all Cores
//"================================================================"
        mrs     x0, midr_el1
        mrs     x1, mpidr_el1
        msr     vpidr_el2, x0
        msr     vmpidr_el2, x1

//"================================================================"
//  Disable coprocessor traps for all Cores
//"================================================================"
//.if (__ARM_FP == 14)            //# If hard float compiling selected
        mov     x0, #0x33ff
        msr     cptr_el2, x0                                            // Disable coprocessor traps to EL2
        msr     hstr_el2, xzr                                           // Disable coprocessor traps to EL2
        mov     x0, #3 << 20
        msr     cpacr_el1, x0                                           // Enable FP/SIMD at EL1
//.endif                                          //# __ARM_FP == 14 hard float on for compiling

//"================================================================"
//  Initialize HCR_EL2 so EL1 is 64 bits for all Cores
//"================================================================"
        mov     x0, #(1 << 31)                                          // 64bit EL1
        msr     hcr_el2, x0

//"================================================================"
//  Initialize SCTLR_EL1 for all Cores
//"================================================================"
    /*  RES1 bits (29,28,23,22,20,11) to 1
         *  RES0 bits (31,30,27,21,17,13,10,6) +
         *  UCI,EE,EOE,WXN,nTWE,nTWI,UCT,DZE,I,UMA,SED,ITD,
         *  CP15BEN,SA0,SA,C,A,M to 0 */
        mov     x0, #0x0800
        movk    x0, #0x30d0, lsl #16
        orr    x0, x0, #(0x1 << 2)            // The C bit on (data cache). 
        orr    x0, x0, #(0x1 << 12)           // The I bit on (instruction cache)
        msr     sctlr_el1, x0

//"================================================================"
//  Return to the EL1_SP1 mode from EL2 for all Cores
//"================================================================"
        mov     x0, #0x3c5                                                      // EL1_SP1 | D | A | I | F
        msr     spsr_el2, x0                                            // Set spsr_el2 with settings
        adr     x0, exit_el1                                            // Address to exit EL2
        msr     elr_el2, x0                                                     // Set elevated return register
        eret                                                                    // Call elevated return
exit_el1:

//"================================================================"
//  Set vector table for EL1 for Cores (Yep all use same vectors)
//"================================================================"
    ldr x0, =vectors                                                
    msr vbar_el1,x0

        mrs x6, mpidr_el1                                               // Read core id on ARM8
        and x6, x6, #0x3                                                // Make cpu id bitmask
        cbz x6, cpu0_exit_multicore_park                // Core0 continues on

//"================================================================"
//      Now park Core 1,2,3 into secondary spinloop on BCM2837
//"================================================================"
        ldr x1, =RPi_CoresReady                                 // Address of CoreReady count
        ldr w0, [x1]                                                    // Load current core count 
        add w0, w0, #1                                                  // Add one as core about to go ready
        str w0, [x1]                                                    // Update CoreReady count
        b  StartSecondarySpin                                   // Jump to setup secondary spin
cpu0_exit_multicore_park:


//"================================================================"
//  About to go to into C kernel clear BSS (Core0 only)
//"================================================================"
        ldr x3, =__bss_end__
        ldr x0, =__bss_start__
        cmp     x0, x3
        bcs     .bss_cleared
.bss_zero_loop:
        str     wzr, [x0], 4
        cmp     x3, x0
        bhi     .bss_zero_loop
.bss_cleared:

//"================================================================"
//                      Core0 will bring Core 1,2,3 to secondary spin 
//"================================================================"
.equ spin_cpu1, 0xe0
        mov x1, #spin_cpu1                                              // Spin core1 jump address
        ldr x2, =multicore_start                                // Function we are going to call
        str     x2, [x1]                                                        // Store the function address to core1
        sev                                                                             // Wake core1 up
        ldr x3, =RPi_CoresReady                                 // Set CoresReady count address
.WaitCore1ACK:
        ldr     w1, [x3]                                                        // Read CoresReady count
        cmp     w1, #2                                                          // Wait for setting of second core ready
        bne     .WaitCore1ACK                                           // Core1 not ready so read again
.equ spin_cpu2, 0xe8
        mov x1, #spin_cpu2                                              // Spin core2 jump address
        ldr x2, =multicore_start                                // Function we are going to call
        str     x2, [x1]                                                        // Store the function address to core2
        sev                                                                             // Wake core2 up
        ldr x3, =RPi_CoresReady                                 // Set CoresReady count address
.WaitCore2ACK:
        ldr     w1, [x3]                                                        // Read CoresReady count
        cmp     w1, #3                                                          // Wait for setting of third core ready
        bne     .WaitCore2ACK                                           // Core2 not ready so read again
.equ spin_cpu3, 0xf0
        mov x1, #spin_cpu3                                              // Spin core3 jump address
        ldr x2, =multicore_start                                // Function we are going to call
        str     x2, [x1]                                                        // Store the function address to core3
        sev                                                                             // Wake core3 up
        ldr x3, =RPi_CoresReady                                 // Set CoresReady count address
.WaitCore3ACK:
        ldr     w1, [x3]                                                        // Read CoresReady count
        cmp     w1, #4                                                          // Wait for setting of third core ready
        bne     .WaitCore3ACK                                           // Core3 not ready so read again

//"================================================================"
// Finally that all done Core0 jumps to the C compiler entry point
//"================================================================"
        b kernel_main                                                   // Jump out to C kernel 

/*================================================================"
      Just safety incase C code ever returns back
"================================================================*/
hang:
        b hang

/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++}
{    Modified bootloader Spin loop but tolerant on registers X0-X7 for C    }
{++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
.equ spin_cpu0, 0xd8
.balign 4
StartSecondarySpin:
        mrs x6, MPIDR_EL1                                               // Fetch core Id
        and x6, x6, #0x3                                                // Create 2 bit mask of core Id
        mov x5, #spin_cpu0                                              // Load address of spins
        mov x1, #0                              // zero x1 register
        str x1, [x5, x6, lsl #3]                                // Make sure caller address is zeroed
secondary_spin:
        wfe                                                                             // This is all I really want processor to sleep
    ldr x4, [x5, x6, lsl #3]                            // Fetch address that has been set
        cbz x4, secondary_spin                                  // If zero spin 
        mov x0, #0
        str x0, [x5, x6, lsl #3]                                // Zero caller address
        mov x1, #0
        mov x2, #0
        mov x3, #0
        blr x4                                                                  // Call the function set
        b StartSecondarySpin                                    // Loop back to spinlock

.balign 4
.ltorg                                                                          /* Tell assembler ltorg data for code above can go here */

/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++}
{  DEFAULT IRQ HANDLER STUB ON WEAK REFERENCE PROVIDE BY RPi-SmartStart API     }
{++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

/* Non re-entrant irq interrupt handler stub                                                                             */
/* http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/ch10s05.html */
/* We assume here we are calling C code so we know C will trash some registers and   */
/* We assume interrupt code has no FPU use, if it does user must save FPU registers  */
/* So we will need to save registers x0-x7, x8-x15, x16-x18, x29, x30,                           */
.weak irq_handler_stub
irq_handler_stub_old:
        stp     x29, x30, [sp, #-16]!                                                   // Store frame pointer and Link register
        stp     x18, x19,  [sp, #-16]!                                                  // Save register x18, as C will trash it.. 19 just there as a pair
        stp     x16, x17,  [sp, #-16]!                                                  // Save register x16, x17 as C will trash them
        stp     x14, x15,  [sp, #-16]!                                                  // Save register x14, x15 as C will trash them
        stp     x12, x13,  [sp, #-16]!                                                  // Save register x12, x13 as C will trash them
        stp     x10, x11,  [sp, #-16]!                                                  // Save register x10, x11 as C will trash them
        stp     x8, x9,  [sp, #-16]!                                                    // Save register x8, x9 as C will trash them
        stp     x6, x7,  [sp, #-16]!                                                    // Save register x6, x7 as C will trash them
        stp     x4, x5,  [sp, #-16]!                                                    // Save register x4, x5 as C will trash them
        stp     x2, x3,  [sp, #-16]!                                                    // Save register x2, x3 as C will trash them
        stp     x0, x1,  [sp, #-16]!                                                    // Save register x0, x1 as C will trash them



        ldr x0, =RPi_IrqFuncAddr                                                        // Address to IrqFuncAddr
        ldr x0, [x0]                                                                            // Load IrqFuncAddr value
        cbz x0, no_irqset                                                                       // If zero no irq function set 
        blr x0                                                                                          // Call Irqhandler that has been set
no_irqset:

irq_handler_stub:
        ldp     x0, x1,  [sp], #16                                                              // Restore register x0, x1
        ldp     x2, x3,  [sp], #16                                                              // Restore register x2, x3
        ldp     x4, x5,  [sp], #16                                                              // Restore register x4, x5
        ldp     x6, x7,  [sp], #16                                                              // Restore register x6, x7
        ldp     x8, x9,  [sp], #16                                                              // Restore register x8, x9
        ldp     x10, x11,  [sp], #16                                                    // Restore register x10, x11
        ldp     x12, x13,  [sp], #16                                                    // Restore register x12, x13
        ldp     x14, x15,  [sp], #16                                                    // Restore register x14, x15
        ldp     x16, x17,  [sp], #16                                                    // Restore register x16, x17
        ldp     x18, x19,  [sp], #16                                                    // Restore register x18, x19
    ldp x29, x30, [sp], #16                                                             // Restore frame pointer and Link register
        eret

    bl  disable_irq
    stp   x0,  x1,  [sp, #-16]!
    stp   x2,  x3,  [sp, #-16]!
    stp   x4,  x5,  [sp, #-16]!
    stp   x6,  x7,  [sp, #-16]!
    stp   x8,  x9,  [sp, #-16]!
    stp   x10, x11, [sp, #-16]!
    stp   x12, x13, [sp, #-16]!
    stp   x14, x15, [sp, #-16]!
    stp   x16, x17, [sp, #-16]!
    stp   x18, x19, [sp, #-16]!

    bl    handle_irq

    ldp   x18, x19, [sp], #16
    ldp   x16, x17, [sp], #16
    ldp   x14, x15, [sp], #16
    ldp   x12, x13, [sp], #16
    ldp   x10, x11, [sp], #16
    ldp   x8,  x9,  [sp], #16
    ldp   x6,  x7,  [sp], #16
    ldp   x4,  x5,  [sp], #16
    ldp   x2,  x3,  [sp], #16
    ldp   x0,  x1,  [sp], #16

    bl  enable_irq
    eret

/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++}
{  DEFAULT FIQ HANDLER STUB ON WEAK REFERENCE PROVIDE BY RPi-SmartStart API     }
{++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

/* Non re-entrant fiq interrupt handler stub */
/* http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/ch10s05.html */
/* We assume interrupt code has no FPU use, if it does user must save FPU registers  */
/* So we will need to save registers x0-x7, x8-x15, x16-x18, x29, x30,                           */
.weak fiq_handler_stub
fiq_handler_stub:       
        stp     x29, x30, [sp, #-16]!                                                   // Store frame pointer and Link register
        stp     x18, x19,  [sp, #-16]!                                                  // Save register x18, as C will trash it.. 19 just there as a pair
        stp     x16, x17,  [sp, #-16]!                                                  // Save register x16, x17 as C will trash them
        stp     x14, x15,  [sp, #-16]!                                                  // Save register x14, x15 as C will trash them
        stp     x12, x13,  [sp, #-16]!                                                  // Save register x12, x13 as C will trash them
        stp     x10, x11,  [sp, #-16]!                                                  // Save register x10, x11 as C will trash them
        stp     x8, x9,  [sp, #-16]!                                                    // Save register x8, x9 as C will trash them
        stp     x6, x7,  [sp, #-16]!                                                    // Save register x6, x7 as C will trash them
        stp     x4, x5,  [sp, #-16]!                                                    // Save register x4, x5 as C will trash them
        stp     x2, x3,  [sp, #-16]!                                                    // Save register x2, x3 as C will trash them
        stp     x0, x1,  [sp, #-16]!                                                    // Save register x0, x1 as C will trash them

        ldr x0, =RPi_FiqFuncAddr                                                        // Address to FiqFuncAddr
        ldr x0, [x0]                                                                            // Load FiqFuncAddr value
        cbz x0, no_fiqset                                                                       // If zero no fiq function set 
        blr x0                                                                                          // Call Irqhandler that has been set
no_fiqset:

        ldp     x0, x1,  [sp], #16                                                              // Restore register x0, x1
        ldp     x2, x3,  [sp], #16                                                              // Restore register x2, x3
        ldp     x4, x5,  [sp], #16                                                              // Restore register x4, x5
        ldp     x6, x7,  [sp], #16                                                              // Restore register x6, x7
        ldp     x8, x9,  [sp], #16                                                              // Restore register x8, x9
        ldp     x10, x11,  [sp], #16                                                    // Restore register x10, x11
        ldp     x12, x13,  [sp], #16                                                    // Restore register x12, x13
        ldp     x14, x15,  [sp], #16                                                    // Restore register x14, x15
        ldp     x16, x17,  [sp], #16                                                    // Restore register x16, x17
        ldp     x18, x19,  [sp], #16                                                    // Restore register x18, x19 
    ldp x29, x30, [sp], #16                                                             // Restore frame pointer and Link register
        eret

/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++}
{                                 VECTOR TABLE IN USE BY RPi-SmartStart API                                     }       
{++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
/* macro to align handlers every 0x80 bytes */
.macro  vector handler
.balign 0x80
b       \handler
.endm

.balign 0x800
.globl  VectorTable
VectorTable:
        /* from current EL with sp_el0 */
        vector  _start                  /* Synchronous */
        vector  irq_handler_stub                    /* IRQ */
        vector  irq_handler_stub                    /* FIQ */
        vector  irq_handler_stub                    /* SErrorStub */

        /* from current EL with sp_elx, x != 0 */
        vector  irq_handler_stub                     /* Synchronous */
        vector  irq_handler_stub /* IRQ */
        vector  irq_handler_stub /* FIQ */
        vector  irq_handler_stub                     /* SErrorStub */

        /* from lower EL, target EL minus 1 is AArch64 */
        vector  irq_handler_stub                    /* Synchronous */
        vector  irq_handler_stub                    /* IRQ */
        vector  irq_handler_stub                    /* FIQ */
        vector  irq_handler_stub                    /* SErrorStub */

        /* from lower EL, target EL minus 1 is AArch32 */
        vector  irq_handler_stub                    /* Synchronous */
        vector  irq_handler_stub                    /* IRQ */
        vector  irq_handler_stub                    /* FIQ */
        vector  irq_handler_stub                    /* SErrorStub */

/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++}
{                       GLOBAL INTERRUPT CONTROL PROVIDE BY RPi-SmartStart API              }
{++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

/* "PROVIDE C FUNCTION: void EnableInterrupts (void);" */
.section .text.EnableInterrupts, "ax", %progbits
.balign 4
.globl EnableInterrupts
.type EnableInterrupts, %function
EnableInterrupts:
        msr daifclr,#2
        ret
.balign 4
.ltorg                                                                          // Tell assembler ltorg data for this code can go here
.size   EnableInterrupts, .-EnableInterrupts

/* "PROVIDE C FUNCTION: void DisableInterrupts (void);" */
.section .text.DisableInterrupts, "ax", %progbits
.balign 4
.globl DisableInterrupts
.type DisableInterrupts, %function
DisableInterrupts:
        msr daifset,#2
        ret
.balign 4
.ltorg                                                                          // Tell assembler ltorg data for this code can go here
.size   DisableInterrupts, .-DisableInterrupts

/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++}
{               RPi-SmartStart API TO SET CORE EXECUTE ROUTINE AT ADDRESS                   }
{++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

/* "PROVIDE C FUNCTION: bool CoreExecute (uint8_t coreNum, void (*func) (void));" */
.section .text.CoreExecute, "ax", %progbits
.balign 4
.globl CoreExecute
.type CoreExecute, %function
CoreExecute:
        ands x0, x0, #255
        beq CoreExecuteFail
        ldr x3, =RPi_CoresReady
        ldr w2, [x3]                                                    // Fetch cores ready count
        cmp w0, w2
        bcs     CoreExecuteFail
        mov x6, #0
        mov w6, w0
        mov x5, #spin_cpu0                                              // Load address of spins
        str x1, [x5, x6, lsl #3]                                // Save caller address
        dsb sy
        sev
        mov x0, #1
        ret
CoreExecuteFail:
        mov x0, #0
        ret
.balign 4
.ltorg                                                                          // Tell assembler ltorg data for this code can go here
.size   CoreExecute, .-CoreExecute

/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++}
{         RPi-SmartStart Compatability for David Welch CALLS he always uses         }
{++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

/* "PROVIDE C FUNCTION: void PUT32 (uint32_t addr, uint32_t value);" */
.section .text.PUT32, "ax", %progbits
.balign 4
.globl PUT32
.type PUT32, %function
PUT32:
  str w1,[x0]
  ret
.balign 4
.ltorg                                                                          // Tell assembler ltorg data for this code can go here
.size   PUT32, .-PUT32

 /* "PROVIDE C FUNCTION: uint32_t GET32 (uint32_t addr);" */
 .section .text.GET32, "ax", %progbits
.balign 4
.globl GET32
.type GET32, %function
GET32:
    ldr w0,[x0]
    ret
.balign 4
.ltorg                                                                          // Tell assembler ltorg data for this code can go here
.size   GET32, .-GET32

/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++}
{                       VC4 ADDRESS HELPER ROUTINES PROVIDE BY RPi-SmartStart API           }
{++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

/* "PROVIDE C FUNCTION: uint32_t ARMaddrToGPUaddr (void* ARMaddress);" */
.section .text.ARMaddrToGPUaddr, "ax", %progbits
.balign 4
.globl ARMaddrToGPUaddr;                
.type ARMaddrToGPUaddr, %function
//"================================================================"
// ARMaddrToGPUaddr -- AARCH64 Pi3 code
// C Function: uint32_t ARMaddrToGPUaddr (void* ARMaddress);
// Entry: x0 will have ARMAddress value
//"================================================================"
ARMaddrToGPUaddr:
        mov x1, #0xC0000000                                             // ARM to VC conversion value
        orr x0, x0, x1                                                  // Create bus address
        ret                                                                             // Return
.balign 4
.ltorg                                                                          // Tell assembler ltorg data for this code can go here
.size   ARMaddrToGPUaddr, .-ARMaddrToGPUaddr


/* "PROVIDE C FUNCTION: uint32_t GPUaddrToARMaddr (uint32_t BUSaddress);" */
.section .text.GPUaddrToARMaddr, "ax", %progbits
.balign 4
.globl GPUaddrToARMaddr;                
.type GPUaddrToARMaddr, %function
//"================================================================"
// GPUaddrToARMaddr -- AARCH64 Pi3 code
// C Function: uint32_t GPUaddrToARMaddr (uint32_t BUSaddress);
// Entry: x0 will have GPUAddress value
//"================================================================"
GPUaddrToARMaddr:
        mov x1, ~0xC0000000                                             // ARM to VC conversion value   
        and x0, x0, x1                                                  // Create arm address
        ret                                                                             // Return
.balign 4
.ltorg                                                                          // Tell assembler ltorg data for this code can go here
.size   GPUaddrToARMaddr, .-GPUaddrToARMaddr

/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++}
{               IRQ AND FIQ HELPER ROUTINES PROVIDE BY RPi-SmartStart API               }
{++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

/*"========================================================================="
#*        setIrqFuncAddress -- Composite AARCH64 code                           *
#*        C Function: uintptr_t setIrqFuncAddress (void (*ARMaddress)(void));   *
#*        Entry: R0 will have ARMAddress value                                  *
#*        Return: R0 will return with the previous Irq function address         *
"=========================================================================="*/
.section .text.setIrqFuncAddress, "ax", %progbits
.balign 4
.globl setIrqFuncAddress;
.type setIrqFuncAddress, %function
setIrqFuncAddress:
        msr daifset,#2                                                  // Disable irq interrupts as we are clearly changing call
        ldr x1, =RPi_IrqFuncAddr                                // Load address of function to call on interrupt 
        ldr x2, [x1]                                                    // Load current irq call address
        str x0, [x1]                                                    // Store the new function pointer address we were given
        mov x0, x2                                                              // return the old call function
        ret                                                                             // Return
.balign 4
.ltorg                                                                          // Tell assembler ltorg data for this code can go here
.size   setIrqFuncAddress, .-setIrqFuncAddress

/*"========================================================================="
#*        setFiqFuncAddress -- Composite AARCH64 code                           *
#*        C Function: uintptr_t setFiqFuncAddress (void (*ARMaddress)(void));   *
#*        Entry: R0 will have ARMAddress value                                  *
#*        Return: R0 will return with the previous Irq function address         *
"=========================================================================="*/
.section .text.setFiqFuncAddress, "ax", %progbits
.balign 4
.globl setFiqFuncAddress;
.type setFiqFuncAddress, %function
setFiqFuncAddress:
        msr daifset,#2                                                  // Disable irq interrupts as we are clearly changing call
        ldr x1, =RPi_FiqFuncAddr                                // Load address of function to call on interrupt 
        ldr x2, [x1]                                                    // Load current fiq call address
        str x0, [x1]                                                    // Store the new function pointer address we were given
        mov x0, x2                                                              // return the old call function
        ret                                                                             // Return
.balign 4
.ltorg                                                                          // Tell assembler ltorg data for this code can go here
.size   setFiqFuncAddress, .-setFiqFuncAddress

/****************************************************************
           DATA FOR SMARTSTART64  NOT EXPOSED TO INTERFACE 
****************************************************************/
.section ".data.notexposed_smartstart64", "aw"
.balign 8
RPi_IrqFuncAddr : .8byte 0;                             // Irq Function Address

RPi_FiqFuncAddr : .8byte 0;                             // Fiq Function Address

/****************************************************************
           DATA FOR SMARTSTART64  EXPOSED TO INTERFACE 
****************************************************************/
.section ".data.smartstart64", "aw"
.balign 4

.globl RPi_IO_Base_Addr;                                // Make sure Pi_IO_Base_Addr label is global
RPi_IO_Base_Addr : .4byte 0;                    // Peripheral Base addr is 4 byte variable in 64bit mode

.globl RPi_ARM_TO_GPU_Alias;                    // Make sure RPi_ARM_TO_GPU_Alias label is global
RPi_ARM_TO_GPU_Alias: .4byte 0;                 // ARM to GPU alias is 4 byte variable in 32bit mode

.globl RPi_BootAddr;                                    // Make sure RPi_BootAddr label is global
RPi_BootAddr : .4byte 0;                                // CPU boot address is 4 byte variable in 64bit mode

.globl RPi_CoresReady;                                  // Make sure RPi_CoresReady label is global
RPi_CoresReady : .4byte 0;                              // CPU cores ready for use is 4 byte variable in 32bit mode

.globl RPi_CPUBootMode;                                 // Make sure RPi_CPUBootMode label is global
RPi_CPUBootMode : .4byte 0;                             // CPU Boot Mode is 4 byte variable in 64bit mode

.globl RPi_CpuId;                                               // Make sure RPi_CpuId label is global
RPi_CpuId : .4byte 0;                                   // CPU Id is 4 byte variable in 64bit mode

.globl RPi_CompileMode;                                 // Make sure RPi_CompileMode label is global
RPi_CompileMode : .4byte 0;                             // Compile mode is 4 byte variable in 64bit mode

.globl RPi_SmartStartVer;                               // Make sure RPi_SmartStartVer label is global
RPi_SmartStartVer : .4byte 0x00020009;  // SmartStart version is 4 byte variable in 32bit mode


.globl get_el
get_el:
    mrs x0, CurrentEL
    lsr x0, x0, #2
    ret

.globl put32
put32:
    str w1,[x0]
    ret

.globl get32
get32:
    ldr w0,[x0]
    ret

.globl delay
delay:
    subs x0, x0, #1
    bne delay
    ret

.globl get_sp
get_sp:
    ldr x0, [sp]
    ret
